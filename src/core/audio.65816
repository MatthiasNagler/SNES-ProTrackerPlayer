/**
* music & sound effect handler
*
*
*/

.include "src/core/audio.h"
.section "core.audio"

.redef self.dataPointer temp.misc

core.audio.init:
  AX16
  phd
  pea ZP
  pld

  lda.w #VOID
  sta.w GLOBAL.audio.song.current
  jsr core.audio.uploadCode

  stz.w GLOBAL.audio.report

  ;feedback via callback
  lda #audio.void.CLB
  sta.w GLOBAL.audio.report.callback

  stz.w GLOBAL.audio.sfx.inhibit
  stz.w GLOBAL.audio.sfx_counter

  stz.w GLOBAL.audio.audioPlaying
  stz.w GLOBAL.audio.song.current

  lda.w #AUDIO.VOLUME.FULL
  sta.w GLOBAL.audio.volumeCurrent

  pld
  rts


  CALLBACK audio.void
  rts

core.audio.setCallback:
  AX16
  sta.w GLOBAL.audio.report.callback
  rts

core.audio.play:
  ;check if spc sends report data
  AX16
  lda.l APUIO1
  and.w #$e0
  cmp.w #$e0
  bne +
    lda.l APUIO2
    cmp.w GLOBAL.audio.report
    beq +
      sta.w GLOBAL.audio.report
      ldx.w GLOBAL.audio.report.callback
      jsr core.callback.execute

+
  stz.w GLOBAL.audio.sfx.inhibit
  rts

core.audio.playEffectDefault:
  AX16
  ldx.w #SPC.SOUND_EFFECT.PANNING.CENTER | SPC.SOUND_EFFECT.PITCH.NORMAL

/*
@param a: sound effect id
@param x (8bit): pitch

target on spc side:
p0: cmd
p1: effect id
p2: pitch 0=default
p3: msb:flip flag, volume
*/
core.audio.playEffect:
  AX16
  sep #$20
  sta.l APUIO1
  txa
  sta.l APUIO2

  inc.w GLOBAL.audio.sfx_counter
  lda.w GLOBAL.audio.sfx_counter
  sta.l APUIO3

  ;dont wait for ack
  lda.b #SPC.COMMAND.SOUND.PLAY
  sta.l APUIO0

  rep #$31
  rts


core.audio.uploadCode:
  AX16
  php
  sei

  lda.w #:spc700.code
  ldx.w #spc700.code
  pea GLOBAL.unpack.buffer & $ffff
  pea GLOBAL.unpack.buffer >> 16
  jsr core.unpack.unpack
  pla
  pla

  lda.w #GLOBAL.unpack.buffer
  sta self.dataPointer
  lda.w #GLOBAL.unpack.buffer >> 8
  sta self.dataPointer+1

  ldy.w #0        ;clear data pointer
  lda.w #$BBAA
  jsr _spc.waitAcknowledge

  sep #$20
  lda.b #$CC        ;send "start transfer"  
  bra ++
-
    lda.b [self.dataPointer],y
    iny
    xba
    lda.b #$00
    bra +

--
      xba
      lda.b [self.dataPointer],y
      iny
      xba
      jsr _spc.waitAcknowledge
      inc a

+
      rep #$20
      sta.l APUIO0
      sep #$20
      dex
      bne --

    jsr _spc.waitAcknowledge

--
    adc.b #$03
    beq --

++  
  pha
  rep #$20
  lda.b [self.dataPointer],y
  iny
  iny
  tax
  lda.b [self.dataPointer],y
  iny
  iny
  sta.l APUIO2
  sep #$20
  cpx.w #$0001        ;whats this?
  lda.b #$00
  rol a
  sta.l APUIO1
  adc.b #$7F
  pla
  sta.l APUIO0
  jsr _spc.waitAcknowledge
  bvs -

+
  plp
  rts

_spc.commandWaitAcknowledge:
  A8
  sta.l APUIO0

_spc.waitAcknowledge:
  php
  rep #$10
  phx
  ldx #0
-   dex
    bne +
      TRIGGER_ERROR E_SpcTimeout

+    
    cmp.l APUIO0
    bne -

  plx
  plp
  rts

core.audio.uploadSamplePack:
  AX16
  php
  sei

  cmp.w #AUDIO.SAMPLEPACK.MAX
  bcc +
    TRIGGER_ERROR E_IndexError

+  
  pha
  asl a
  clc
  adc 1,s
  tax
  pla

  lda.l SamplePackLUT,x
  sta self.dataPointer
  lda.l SamplePackLUT+1,x
  sta self.dataPointer+1


  ;pointer
  ldy.w #0
  ;length
  lda.b [self.dataPointer],y
  dec a
  dec a
  tax

  sep #$20
  lda.b #SPC.COMMAND.SAMPLES.UPLOAD.INIT         ;send "upload song" command
  jsr _spc.commandWaitAcknowledge

  iny
  iny

  jsr _uploadDataLoop

  lda.b #SPC.COMMAND.SAMPLES.UPLOAD.DONE   ;send "upload song complete" commadn if transfer is done
  sta.l APUIO0

  plp
  rts

_uploadDataLoop:
  A8
-
    lda.b [self.dataPointer],y   ;write 3 bytes to ports
    sta.l APUIO1
    iny
    lda.b [self.dataPointer],y
    sta.l APUIO2
    iny
    lda.b [self.dataPointer],y
    sta.l APUIO3
    iny
    
    lda.b #SPC.COMMAND.SONG.UPLOAD.STATE1   ;write ack transfer 1 to port0
    jsr _spc.commandWaitAcknowledge

    lda.b [self.dataPointer],y   ;write 3 bytes to ports
    sta.l APUIO1
    iny
    lda.b [self.dataPointer],y
    sta.l APUIO2
    iny
    lda.b [self.dataPointer],y
    sta.l APUIO3
    iny
    
    lda.b #SPC.COMMAND.SONG.UPLOAD.STATE2   ;write ack transfer 1 to port0
    jsr _spc.commandWaitAcknowledge

    dex
    dex
    dex
    dex
    dex
    dex
    cpx.w #$f000
    bcc -
  rts


core.audio.reset:
  AX16
  php
  sei
  sep #$20
  lda.b #00
  sta.l APUIO1
  sta.l APUIO2
  sta.l APUIO3
  lda.b #SPC.COMMAND.RESET   ;write ack transfer 1 to port0
  jsr _spc.commandWaitAcknowledge
  stz.w GLOBAL.audio.song.current
  plp
  rts

core.audio.setVolume:
  AX16
  and.w #$7f
  ora.w #SPC.COMMAND.SONG.SET_VOLUME.IMMEDIATE
  jmp core.audio.updateVolume

core.audio.fadeToVolume:
  AX16
  and.w #$7f
  jmp core.audio.updateVolume


core.audio.updateVolume:
  AX16
  sep #$20
  sta.w GLOBAL.audio.volumeCurrent
  sta.l APUIO1
  sta.l APUIO2

  lda.b #SPC.COMMAND.SONG.SET_VOLUME
  
  jsr _spc.commandWaitAcknowledge
  lda.b #$00
  sta.l APUIO0

  rep #$31
  rts

core.audio.setReportType:
  AX16
  sep #$20
  sta.w GLOBAL.audio.reportType
  sta.l APUIO1
  sta.l APUIO2

  lda.b #SPC.COMMAND.SONG.SET_REPORT_TYPE
  
  jsr _spc.commandWaitAcknowledge
  lda.b #$00
  sta.l APUIO0

  rep #$31
  rts


/*
  play subsong by effectively setting target pattern number
*/
core.audio.playSubSong:
  AX16
  sep #$20
  sta.l APUIO1
  sta.w GLOBAL.audio.subsong.current

  lda.b #SPC.COMMAND.SET_PATTERN_POS
  ;jsr _spc.commandWaitAcknowledge
  sta.l APUIO0

  rep #$10
  ldx #0
-   dex
    bne +
      TRIGGER_ERROR E_SpcTimeout

+    
    lda.b #SPC.COMMAND.SET_PATTERN_POS
    cmp.l APUIO0
    bne -

    ;make sure not only that command is ackd, but also pattern reported correctly
    lda.l APUIO1
    dec a
    cmp.w GLOBAL.audio.subsong.current
    bne -

  lda.b #$00
  sta.l APUIO0
  rep #$31

  lda.w #AUDIO.VOLUME.FULL
  jmp core.audio.setVolume

/*
  set echo volume. Echo settings are fixed, you can basically only adjust the echo volume
*/
core.audio.setEchoVolume:
  AX16
  sep #$20
  sta.l APUIO1
  sta.w GLOBAL.audio.echoVolume
  ;try wide stereo effect here
  eor.b #$ff
  inc a
  sta.l APUIO2

  lda.b #SPC.COMMAND.SET_ECHO_VOLUME
  ;jsr _spc.commandWaitAcknowledge
  sta.l APUIO0

  rep #$10
  ldx #0
-   dex
    bne +
      TRIGGER_ERROR E_SpcTimeout

+
    lda.b #SPC.COMMAND.SET_ECHO_VOLUME
    cmp.l APUIO0
    bne -

    ;make sure not only that command is ackd, but also pattern reported correctly
    lda.l APUIO1
    dec a
    cmp.w GLOBAL.audio.echoVolume
    bne -

  lda.b #$00
  sta.l APUIO0
  rep #$31
  rts

core.audio.stopSong:
  AX16
  php
  sei
  sep #$20
  lda.b #00
  sta.l APUIO1
  sta.l APUIO2
  sta.l APUIO3
  lda.b #SPC.COMMAND.SONG.STOP   ;write ack transfer 1 to port0
  jsr _spc.commandWaitAcknowledge
  stz.w GLOBAL.audio.song.current
  plp
  lda.w #AUDIO.VOLUME.FULL
  sta.w GLOBAL.audio.volumeCurrent
  rts

;arg1: song
core.audio.playSong:
  AX16  
  ;dont retrigger current song
  and.w #$ff
  beq core.audio.stopSong
  cmp.w GLOBAL.audio.song.current
  beq +
    sta.w GLOBAL.audio.song.current
    
    php
    sei
    pha
    asl a
    clc
    adc 1,s
    tax
    pla

    lda.l SongLUT+2,x
    tay
    lda.l SongLUT,x
    tax
    tya
    pea GLOBAL.unpack.buffer & $ffff
    pea GLOBAL.unpack.buffer >> 16
    jsr core.unpack.unpack
    dec a
    dec a
    tax ;length
    pla
    pla
    
    lda.w #GLOBAL.unpack.buffer
    sta self.dataPointer
    lda.w #GLOBAL.unpack.buffer >> 8
    sta self.dataPointer+1


    ;pointer
    ldy.w #0

    sep #$20
    stz.w GLOBAL.audio.subsong.current
    lda.b #SPC.COMMAND.SONG.UPLOAD.INIT         ;send "upload song" command
    jsr _spc.commandWaitAcknowledge

    jsr _uploadDataLoop

    lda.b #SPC.COMMAND.SONG.UPLOAD.DONE   ;send "upload song complete" commadn if transfer is done
    sta.l APUIO0

    lda.b #0  ;wait until spc has acknowledged upload done
    jsr _spc.waitAcknowledge
    plp

+
  lda.w GLOBAL.audio.subsong.current
  and.w #$ff
  beq +
    lda.w #0
    jsr core.audio.playSubSong
    lda.w #AUDIO.VOLUME.FULL
    jmp core.audio.setVolume

+ 
  lda.w #AUDIO.VOLUME.FULL
  jmp core.audio.fadeToVolume

.ends

