/**
* Part of a crude, hardcoded interface model.
*
*/

;zp-vars
.enum 0
  _iterator INSTANCEOF iteratorStruct
  _dimension INSTANCEOF dimensionStruct
.ende

.section "interface.dimension"

/*
* set pixel position of object
*/
interface.dimension.setPosition:
  AX16
  lda OBJECT.CALL.ARG.1,s
  stz.b _dimension.position.x
  sta.b _dimension.position.x + 1

  lda OBJECT.CALL.ARG.2,s
  stz.b _dimension.position.y  
  sta.b _dimension.position.y + 1
  rts


/*
* get pixel position of object
*/
interface.dimension.getPosition:
  AX16
  lda.b _dimension.direction
  and.w #$ff
  ldx.b _dimension.position.x + 1
  ldy.b _dimension.position.y + 1
  rts

/*
* get pixel position of object
*/
interface.dimension.getCenterPosition:
  AX16
  lda _dimension.size.x
  lsr a
  clc
  adc _dimension.position.x + 1
  tax
  lda _dimension.size.y
  lsr a
  clc
  adc _dimension.position.y + 1
  tay
  rts


/*
* get pixel position of object
*/
interface.dimension.getCollisionBasepoint:
  AX16
  lda.b _dimension.position.x + 1
  clc
  adc _dimension.collision.basepoint.x
  tax  
  lda.b _dimension.position.y + 1
  clc
  adc _dimension.collision.basepoint.y
  tay
  sec
  rts
 
/*
* get pixel size of object, also direction (hack)
*/
interface.dimension.getSize:
  AX16
  ldx.b _dimension.size.x
  ldy.b _dimension.size.y
  lda.b _dimension.direction
  and.w #$ff
  rts

/*
* move object with subpixel accuracy
*
* param 1 <int, 16bit>  ;x-axis translation value
* param 2 <int, 16bit>  ;y-axis translation value
*/
interface.dimension.translate:
  AX16
  lda OBJECT.CALL.ARG.2,s
  tay
  lda OBJECT.CALL.ARG.1,s
  tax  
  jmp dimension.library.translate


dimension.library.translate:
  AX16
  tya
  beq ++
  bmi +
    adc.b _dimension.position.y
    sta.b _dimension.position.y
    sep #$20
    lda _dimension.position.y + 2
    adc #0
    sta _dimension.position.y + 2
    bra ++
    
+
    adc.b _dimension.position.y
    sta.b _dimension.position.y
    sep #$20
    lda _dimension.position.y + 2
    sbc #0
    sta _dimension.position.y + 2

++
  rep #$31
  txa
  beq ++
  bmi +
    adc.b _dimension.position.x
    sta.b _dimension.position.x
    sep #$20
    lda _dimension.position.x + 2
    adc #0
    sta _dimension.position.x + 2
    bra ++
    
+
    adc.b _dimension.position.x
    sta.b _dimension.position.x
    sep #$20
    lda _dimension.position.x + 2
    sbc #0
    sta _dimension.position.x + 2

++
  rep #$31
  rts



;limit distance to 7 bits
_clampDistance:
  AX16
  cmp.w #$8000
  bcs ++
    ;distance positive
    ;any out of range bits set? clamp to max value
    bit.w #$3f ~$ffff
    beq +
      lda.w #$3f
      bra +

++
    ;distance negative
    cmp.w #$ffc1
    bcs +
      lda.w #$7f

+
  and.w #$7f
  rts


interface.dimension.applyGravity:
  AX16
  lda _dimension.speed.y
  adc #GRAVITY.ACCELERATION
  sta _dimension.speed.y
  
interface.dimension.applySpeedZ:
  lda _dimension.speed.y
  bpl +
    ;traveling upwards
    lda.b _dimension.position.y
    clc
    adc _dimension.speed.y
    sta.b _dimension.position.y

    sep #$20
    lda.b _dimension.position.y+2
    sbc #0
    sta.b _dimension.position.y+2
    
    bra ++

+
    ;traveling downwards
    lda.b _dimension.position.y
    clc
    adc _dimension.speed.y
    sta.b _dimension.position.y

    sep #$20
    lda.b _dimension.position.y+2
    adc #0
    sta.b _dimension.position.y+2

++
  rep #$31
  rts


/*
* move object in direction specified by radial angle
*
* @param a <int, 16bit>  ;angle
* @param x <int, 16bit>  ;speed
*/
interface.dimension.applyAngle:
  php
  phx
  pha
  rep #$31
  ;calculate displacement, x
  lda 1,s
  and.w #$ff
  jsr core.math.cos
  tax
  lda 3,s
  jsr core.math.mul
  bit.w #$8000
  bne +
    clc
    adc _dimension.position.x
    sta _dimension.position.x
    lda _dimension.position.x +2
    adc #0
    sta _dimension.position.x +2
    bra ++
+
    clc
    adc _dimension.position.x
    sta _dimension.position.x
    lda _dimension.position.x +2
    sbc #0
    sta _dimension.position.x +2

++


  ;calculate displacement, y
  lda 1,s
  and.w #$ff
  jsr core.math.sin
  tax
  lda 3,s
  jsr core.math.mul
  bit.w #$8000
  bne +  
    clc
    adc _dimension.position.y
    sta _dimension.position.y
    lda _dimension.position.y +2
    adc #0
    sta _dimension.position.y +2
    bra ++
+
    clc
    adc _dimension.position.y
    sta _dimension.position.y
    lda _dimension.position.y +2
    sbc #0
    sta _dimension.position.y +2

++
  pla
  plx
  plp
  rts


interface.dimension.center:
  AX16
  lda _dimension.size.x
  lsr a
  pha
  lda _dimension.position.x+1
  sec
  sbc 1,s
  sta _dimension.position.x+1
  pla
  lda _dimension.size.y
  lsr a
  pha
  lda _dimension.position.y+1
  sec
  sbc 1,s
  sta _dimension.position.y+1
  pla
  rts


;a: sound effect
;x: pitch
interface.dimension.playSoundEffect:
  AX16
  pha

  ;determine lifeform x-pos on screen
  lda _dimension.position.x+1
  clc
  adc _dimension.collision.basepoint.x
  sec
  sbc.w (GLOBAL.screen.position.x&$ffff)+1

  ;clamp to screen, but dont pan to left or right completely (in case one sound channel broken)
  cmp.w #$20
  bcs +
    lda.w #$20

+
  cmp.w #$d0
  bcc +
    lda.w #$d0

+
  lsr a
  lsr a
  lsr a
  lsr a
  and.w #$0f
  pha
  txa
  and.w #$f0
  ora 1,s
  sta 1,s
  pla
  tax
  pla
  jmp core.audio.playEffect

extern.dimension.playSoundEffect:
  jsr interface.dimension.playSoundEffect
  rtl


interface.dimension.checkOnScreen:
  AX16
  lda _dimension.position.x + 1
  clc
  adc _dimension.size.x
  cmp.w (GLOBAL.screen.position.x &$ffff) +1
  bcc ++

  lda.w (GLOBAL.screen.position.x &$ffff) +1
  clc
  adc.w #SCREEN.DEFAULT.SIZE.X
  cmp _dimension.position.x + 1
  bcc ++

  lda _dimension.position.y + 1
  clc
  adc _dimension.size.y
  cmp.w (GLOBAL.screen.position.y &$ffff) +1
  bcc ++

  lda.w (GLOBAL.screen.position.y &$ffff) +1
  clc
  adc.w #SCREEN.DEFAULT.SIZE.Y
  cmp _dimension.position.y + 1
  bcc ++

  sec
  rts


++
  clc
  rts

interface.dimension.hasTileChanged:
  AX16
  pea 0
  lda _dimension.position.y+1
  lsr a
  lsr a
  lsr a
  sta 1,s
  lda _dimension.position.last.y
  lsr a
  lsr a
  lsr a
  cmp 1,s
  bne ++

  lda _dimension.position.x+1
  lsr a
  lsr a
  lsr a
  sta 1,s
  lda _dimension.position.last.x
  lsr a
  lsr a
  lsr a
  cmp 1,s
  beq +

++
  ;changed
  sec
  bra +++
+
  clc
+++
  ;keep last position
  lda _dimension.position.y+1
  sta _dimension.position.last.y
  lda _dimension.position.x+1
  sta _dimension.position.last.x
  pla  
  rts
  
.ends
